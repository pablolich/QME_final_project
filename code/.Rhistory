# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,5), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, r, 1, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
library(dplyr)
# This function returns the values of the min and max
get_extrema <- function(vec){
# If the min of the vector equals the max, it is all one
# value (does not oscillate)
if (min(vec) == max(vec)) return(min(vec))
# An extrema has lower/higher values on both sides
extrema <- vec[(vec > lead(vec) & vec > lag(vec)) |
(vec < lead(vec) & vec < lag(vec))] %>%
na.omit() # remove any NAâ€™s from the vector
# If there are no points that match this criteria, it
# has not yet converged, so just return the minimum value
if (length(extrema) == 0) return(min(vec))
# otherwise, return the vector of min/max values
return(extrema)
}
# This function creates a simulation of the logistic map
logistic_map <- function(N0, r, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
# now step through the simulation, adding population
# densities based on the previous value
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
(1 - trajectory[ii-1])
}
return(trajectory)
}
ricker_model = function(N0, r, b, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
exp(-b*trajectory[ii-1])
}
return(trajectory)
}
start_r <- 0.001
end_r <- 20
# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,5), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, r, 1, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
library(deSolve)
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
state = c(N = 10)
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 0.1, K = 1.5)
# initial conditions: also a named vector
state <- c(N = 1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
parameters = c(u = 0.1, v = 2, c = 0.1)
state = c(state = 1)
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
allee <- function(t, state, params){
with (as.list(c(state, params)), {
dndt = (((u*state)/(v+state)) - c*state)*state
return(list(dndt))
})
}
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
rmax <- 50 ## set maximum value for rate parameter
plot(-10, -10, xlim = c(0, rmax), ylim = c(0, 1000), xlab = "r", ylab = "X") ##Create empty plot
b <- 0.01 ##strength of density dependence
r <- seq(0, rmax, by = 0.05) ##set step size of r values to start at 0, then repeat step-wise in
n <- 100 ##set how many times the time series function will run, starting with the first value of r = 0
for (z in 2:length(r)) {
Results <- vector()
Results <- 10
for (i in 2:n) {
Results[i] <- Results[i - 1] * r[z] * exp(-b*Results[i - 1]) ## This is graphing N*=rN*e^(-b/N*) from my
##written equations
}
uval <- unique(Results[40:n]) ##run the population to n, then select unique values after steady state is reached
points(rep(r[z], length(uval)), uval, cex = 0.1, pch = 19)
}
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
Continue
Results
Results
install.packages("tidyverse")
#!/usr/bin/env r
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
setwd("~/Desktop/coursework/QME/QME_final_project/code/")
data = read.csv('../data/taylor_results.csv')
data
data
colnames(data) <- c('sim', 'n_preferences', seq(20))
data_w = data %>% pivot_longer(!c(sim, n_preferences), names_to = 'n_consumers', values_to = 'ssq') %>%
group_by(n_preferences, n_consumers) %>%
mutate(mean_ssq = base::mean(ssq, na.rm = TRUE),
var_ssq = sd(ssq, na.rm = TRUE))
library(tidyverse)
library(viridis)
data_w = data %>% pivot_longer(!c(sim, n_preferences), names_to = 'n_consumers', values_to = 'ssq') %>%
group_by(n_preferences, n_consumers) %>%
mutate(mean_ssq = base::mean(ssq, na.rm = TRUE),
var_ssq = sd(ssq, na.rm = TRUE))
setwd("~/Desktop/coursework/QME/QME_final_project/code/")
data = read.csv('../data/taylor_results.csv')
data
#average over simulations
ggplot(data , aes(x = n/N, y = distance_comm, group = interaction(a, b, N, sim),
colour = interaction(a, b)))+
geom_point() + geom_line()
#average over simulations
ggplot(data , aes(x = n/N, y = distance_assembly, group = interaction(a, b, N, sim),
colour = interaction(a, b)))+
geom_point() + geom_line()
data
#average over simulations
data_w = data %>% group_by(!sim) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
data_w
data = read.csv('../data/taylor_results.csv')
data
#average over simulations
data_w = data %>% group_by(!sim) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
data_w
#average over simulations
data_w = data %>% group_by(a, b, n/N) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
data_w
ggplot(data , aes(x = n/N, y = distance_assembly, group = interaction(a, b, N, sim),
colour = interaction(a, b)))+
geom_point() + geom_line()
ggplot(data , aes(x = n/N, y = mean_dist_assembly, group = interaction(a, b, N, sim),
colour = interaction(a, b)))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = mean_dist_assembly, group = interaction(a, b, N, sim),
colour = interaction(a, b)))+
geom_point() + geom_line()
#average over simulations
data_w = data %>%
pivot_longer(distance_assembly, distance_optimal, distance_naive) %>%
group_by(a, b, n/N) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
#average over simulations
data_w = data %>%
pivot_longer(distance_assembly, distance_optimal, distance_naive,
names_to = "method", values_to = "value") %>%
group_by(a, b, n/N) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
#average over simulations
data_w = data %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "value") %>%
group_by(a, b, n/N) %>%
mutate(mean_dist_assembly = mean(distance_assembly))
#average over simulations
data_w = data %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "value") %>%
group_by(a, b, n/N)
data_w
#average over simulations
data_w = data %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "value") %>%
group_by(a, b, n/N)
data_w
#average over simulations
data_w = data %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist_assembly, group = interaction(a, b, N, method),
colour = interaction(a, b)))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = mean_dist, group = interaction(a, b, N, method),
colour = interaction(a, b)))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = mean_dist, group = interaction(a, b, method),
colour = interaction(a, b)))+
geom_point() + geom_line()
data
data_w
data_w
ggplot(data_w , aes(x = n/N, y = mean_dist, group = method,
colour = method))+
geom_point() + geom_line()
data_w
#average over simulations
data_w = data %>%
filter(c(1:13)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
#average over simulations
data_w = data %>%
select(c(1:13)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
data_w
#average over simulations
data_w = data %>%
select(c(1:12)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
data_w
data
#average over simulations
data_w = data %>%
select(c(1:11, 12:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
data_w
#average over simulations
data_w = data %>%
select(c(1:10, 12:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, ) %>%
mutate(mean_dist = mean(dist_value))
data_w
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b) %>%
mutate(mean_dist = mean(dist_value))
data_2w
data_w
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, N) %>%
mutate(mean_dist = mean(dist_value))
data_w
ggplot(data_w , aes(x = n/N, y = mean_dist, group = method,
colour = method))+
geom_point() + geom_line()
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist, group = method,
colour = method))+
geom_point() + geom_line()
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist, group = method,
colour = method))+
geom_point() + geom_line()
data_w
ggplot(data_w , aes(x = n/N, y = dist_value, group = method,
colour = method))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = dist_value,
group = interaction(method, sim),
colour = method))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = interaction(method),
colour = method))+
geom_point() + geom_line()
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N, method) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = interaction(method),
colour = method))+
geom_point() + geom_line()
data = read.csv('../data/taylor_results.csv')
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N, method) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = interaction(method),
colour = method))+
geom_point() + geom_line()
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method))
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw(aspect_ratio = 1)
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
ggsave('../data/error_n/N.pdf', height = 4, width = 4.5, units = 'cm')
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
ggsave('../data/error_n_N.pdf', height = 4, width = 4.5, units = 'cm')
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
ggsave('../data/error_n_N.pdf', height = 4, width = 4.5)
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
theme(legend.position = c(0.7, 0.7))+
ggsave('../data/error_n_N.pdf', height = 4, width = 4.5)
data = read.csv('../data/taylor_results.csv')
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N, method) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
theme(legend.position = c(0.7, 0.7))+
ggsave('../data/error_n_N.pdf', height = 4, width = 4.5)
setwd("~/Desktop/coursework/QME/QME_final_project/code/")
data = read.csv('../data/taylor_results.csv')
data
#average over simulations
data_w = data %>%
select(c(1:11, 13:15)) %>%
pivot_longer(c(distance_assembly, distance_optimal, distance_naive),
names_to = "method", values_to = "dist_value") %>%
group_by(a, b, n/N, method) %>%
mutate(mean_dist = mean(dist_value))
ggplot(data_w , aes(x = n/N, y = mean_dist,
group = method,
colour = method))+
geom_point() +
geom_line(aes(linetype = method)) +
theme_bw()+
theme(legend.position = c(0.7, 0.7))+
ggsave('../data/error_n_N.pdf', height = 4, width = 4.5)
